// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  email              String
  password           String   @default("$2b$10$QGF/lucztAy.bqQFEQcSOOjP3fGMZfSsCIl4t.dfFo15Hh0v/C8xW")
  fullName           String
  cpf                String   @unique
  birthday           DateTime
  cellphone          String
  worker             Boolean
  diabetes           Boolean
  hypertensive       Boolean
  profession         String
  neighborhood       String
  city               String
  state              String
  role               Int      @default(5)
  registrationNumber Int      @unique @default(autoincrement())

  profilePhotoUrl    String?
  emergencyContact   String?
  indicatedBy        String?
  leadershipPosition String?
  religion           String?
  notes              String?
  badgeName          String?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  events      EventOnUsers[]
  bedrooms    BedroomsOnUsers[]
  TeamOnUsers TeamOnUsers[]

  @@map("users")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  price       Float
  workerPrice Float

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  users EventOnUsers[]

  bedrooms Bedrooms[]
  Team     Team[]

  @@map("events")
}

model EventOnUsers {
  user      User     @relation(fields: [userId], references: [id])
  userId    String // relation scalar field (used in the `@relation` attribute above)
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String // relation scalar field (used in the `@relation` attribute above)
  paid      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

model Bedrooms {
  id   String  @id @default(uuid())
  note String?

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  users BedroomsOnUsers[]

  @@map("bedrooms")
}

model BedroomsOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     String // relation scalar field (used in the `@relation` attribute above)
  bedrooms   Bedrooms @relation(fields: [bedroomsId], references: [id])
  bedroomsId String // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, bedroomsId])
}

model Team {
  id   String @id @default(uuid())
  name String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  users TeamOnUsers[]

  @@map("teams")
}

model TeamOnUsers {
  user   User   @relation(fields: [userId], references: [id])
  userId String // relation scalar field (used in the `@relation` attribute above)
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, teamId])
}
