// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @default(autoincrement()) @id
  email       String  @unique
  fullName    String
  cpf         String
  birthday    DateTime
  cellphone   String

  religion    String?
  notes       String?

  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt 

  events EventOnUsers[]
  bedrooms BedroomsOnUsers[]

  @@map("users")
}

model Event {
  id          Int     @default(autoincrement()) @id
  name        String
  startDate   DateTime
  endDate     DateTime
  price       Float

  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt 

  users EventOnUsers[]

  bedrooms Bedrooms[]

  @@map("events")
}

model EventOnUsers {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int // relation scalar field (used in the `@relation` attribute above)
  event       Event @relation(fields: [eventId], references: [id])
  eventId     Int // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, eventId])
}

model Bedrooms {
  id        Int     @default(autoincrement()) @id
  note      String?

  event     Event @relation(fields: [eventId], references: [id])
  eventId   Int

  users BedroomsOnUsers[]

  @@map("bedrooms")
}

model BedroomsOnUsers {
  user           User     @relation(fields: [userId], references: [id])
  userId         Int // relation scalar field (used in the `@relation` attribute above)
  bedrooms       Bedrooms @relation(fields: [bedroomsId], references: [id])
  bedroomsId     Int // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, bedroomsId])
}
