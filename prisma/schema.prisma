// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  fullName     String
  cpf          String
  birthday     DateTime
  cellphone    String
  worker       Boolean
  diabetes     Boolean
  hypertensive Boolean
  profession   String
  city         String
  state        String
  role         Int      @default(5)

  profilePhotoUrl    String?
  emergencyContact   String?
  indicatedBy        String?
  leadershipPosition String?
  religion           String?
  notes              String?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  events      EventOnUsers[]
  bedrooms    BedroomsOnUsers[]
  TeamOnUsers TeamOnUsers[]

  @@map("users")
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  startDate   DateTime
  endDate     DateTime
  price       Float
  workerPrice Float

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  users EventOnUsers[]

  bedrooms Bedrooms[]
  Team     Team[]

  @@map("events")
}

model EventOnUsers {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int // relation scalar field (used in the `@relation` attribute above)
  event   Event @relation(fields: [eventId], references: [id])
  eventId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, eventId])
}

model Bedrooms {
  id   Int     @id @default(autoincrement())
  note String?

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  users BedroomsOnUsers[]

  @@map("bedrooms")
}

model BedroomsOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int // relation scalar field (used in the `@relation` attribute above)
  bedrooms   Bedrooms @relation(fields: [bedroomsId], references: [id])
  bedroomsId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, bedroomsId])
}

model Team {
  id   Int    @id @default(autoincrement())
  name String

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  users TeamOnUsers[]

  @@map("teams")
}

model TeamOnUsers {
  user   User @relation(fields: [userId], references: [id])
  userId Int // relation scalar field (used in the `@relation` attribute above)
  team   Team @relation(fields: [teamId], references: [id])
  teamId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, teamId])
}
